package com.example.municipalservices;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.SearchView;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.annotation.SuppressLint;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.bumptech.glide.Glide;
import com.example.municipalservices.pojoMode.ForSearch;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class viewrequestsadmin extends AppCompatActivity {
    RecyclerView rcvwvrad;
    final ArrayList<ForSearch> forSearches=new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_viewrequestsadmin);
        rcvwvrad = findViewById(R.id.rcvwvrad);
        ProgressDialog p=new ProgressDialog(this);
        p.setCancelable(false);
        p.show();


        StringRequest stringRequest = new StringRequest(Request.Method.GET,
                "https://wizzie.online/Publlic_complaint/viewrqstadmin.php",
                response -> {
            p.dismiss();
                    try {
                        JSONArray jsonArray = new JSONArray(response);
                        if (jsonArray.length()==0){
                            Toast.makeText(getApplicationContext(), "Either, No recent Requests or All requests are resolved", Toast.LENGTH_LONG).show();
                        }else {
                            try {
                                for (int i = 0; i < jsonArray.length(); i++) {
                                    JSONObject jsonObject = jsonArray.getJSONObject(i);
                                    ForSearch forSearch = new ForSearch();
                                    forSearch.setAddid(jsonObject.getString("id"));
                                    forSearch.setAduname(jsonObject.getString("userid"));
                                    forSearch.setAdphoto(jsonObject.getString("photo"));
                                    forSearch.setAdloc(jsonObject.getString("location"));
                                    forSearch.setAdstatuss(jsonObject.getString("status"));
                                    forSearch.setAdcomp(jsonObject.getString("compliant"));
                                    forSearch.setDescription(jsonObject.getString("description"));
                                    forSearches.add(forSearch);
                                }
                                rcvwvrad.setLayoutManager(new LinearLayoutManager(getApplicationContext()));
                                vradminadapter vradminadapter =new vradminadapter(viewrequestsadmin.this,forSearches);
                                rcvwvrad.setAdapter(vradminadapter);
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                }, error -> {
            p.dismiss();
            Toast.makeText(this, error.getMessage(), Toast.LENGTH_SHORT).show();
        });
        RequestQueue requestQueue = Volley.newRequestQueue(getApplicationContext());
        requestQueue.add(stringRequest);


        SearchView searchView=findViewById(R.id.searchView);
        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String s) {
                searchForView(s);
                return false;
            }



            @Override
            public boolean onQueryTextChange(String s) {
                searchForView(s);
                return false;
            }
        });
    }
    private void searchForView(String s) {
        ArrayList<ForSearch>forSearches1=new ArrayList<>();
        for (ForSearch forSearch : forSearches){
            if(forSearch.getDescription().contains(s)){
                forSearches1.add(forSearch);
            }
            else if(forSearch.getAduname().contains(s)){
                forSearches1.add(forSearch);
            } else if(forSearch.getAdphoto().contains(s)){
                forSearches1.add(forSearch);
            } else if(forSearch.getAdloc().contains(s)){
                forSearches1.add(forSearch);
            }else if(forSearch.getAdstatuss().contains(s)){
                forSearches1.add(forSearch);
            }
        }
        vradminadapter vradminadapter =new vradminadapter(viewrequestsadmin.this,forSearches1);
        rcvwvrad.setAdapter(vradminadapter);
    }



}


class vradminholder extends RecyclerView.ViewHolder{

    CardView cvadmin;
    ImageView ivwpicad;
    TextView tvpostedby, tvpostedloc,complaint,des;
    public vradminholder(@NonNull View itemView) {
        super(itemView);
        ivwpicad = itemView.findViewById(R.id.ivwpicad);
        tvpostedby = itemView.findViewById(R.id.tvpostedby);
        tvpostedloc = itemView.findViewById(R.id.tvpostedloc);
        cvadmin = itemView.findViewById(R.id.cvadmin);
        complaint = itemView.findViewById(R.id.ctype);
        des = itemView.findViewById(R.id.cdes);
    }
}

class vradminadapter extends RecyclerView.Adapter<vradminholder>{
    Context activity;
    ArrayList<ForSearch> forSearches;

    public vradminadapter(Context applicationContext,ArrayList<ForSearch>forSearches) {
        this.activity = applicationContext;
        this.forSearches=forSearches;
    }

    @NonNull
    @Override
    public vradminholder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {

        LayoutInflater layoutInflater = LayoutInflater.from(activity);
        View v =layoutInflater.inflate(R.layout.vradminindl,parent,false);
        vradminholder vradminholder =new vradminholder(v);
        return vradminholder;
    }

    @Override
    public void onBindViewHolder(@NonNull vradminholder holder, @SuppressLint("RecyclerView") final int position) {

        ForSearch forSearch = forSearches.get(position);
        Glide.with(activity).load(forSearch.getAdphoto()).into(holder.ivwpicad);
        holder.tvpostedby.setText(forSearch.getAduname());
        holder.tvpostedloc.setText(forSearch.getAdloc());
        holder.complaint.setText(forSearch.getAdcomp());
        holder.des.setText(forSearch.getDescription());


        holder.cvadmin.setOnClickListener(v -> {

            Intent intent=new Intent(activity,NewAssign.class);
            intent.putExtra("id",forSearch.getAduname());
            activity.startActivity(intent);



            /*final AlertDialog.Builder alertDialog = new AlertDialog.Builder(activity);
            alertDialog.setTitle("Update to user");
            alertDialog.setMessage("Confirm your action on this Request ?");
            alertDialog.setPositiveButton("Resolved",
                    new DialogInterface.OnClickListener() {
                        public void onClick(final DialogInterface dialog, int which) {

                            StringRequest stringRequest = new StringRequest(Request.Method.POST, "https://wizzie.online/Publlic_complaint/update.php",
                                    new Response.Listener<String>() {
                                        @Override
                                        public void onResponse(String response) {
                                            try {
                                                JSONObject jsonArray = new JSONObject(response);
                                                adstatus.remove(position);
                                                adid.remove(position);
                                                adphoto.remove(position);
                                                adusername.remove(position);
                                                adlocation.remove(position);
                                                notifyDataSetChanged();
                                                dialog.dismiss();
                                                Toast.makeText(v.getRootView().getContext(), "You have Accepted ", Toast.LENGTH_LONG).show();
                                            } catch (JSONException e) {
                                                e.printStackTrace();
                                            }
                                        }
                                    }, new Response.ErrorListener() {
                                @Override
                                public void onErrorResponse(VolleyError error) {
                                    error.printStackTrace();
                                }
                            }) {
                                @Override
                                protected Map<String, String> getParams() throws AuthFailureError {
                                    Map<String, String> params = new HashMap<String, String>();
                                    params.put("a", adid.get(position).toString());
                                    params.put("s", "Resolved,"+adstatus.get(position).toString().split(",")[1]);
                                    return params;
                                }
                            };
                            RequestQueue requestQueue = Volley.newRequestQueue(v.getRootView().getContext());
                            requestQueue.add(stringRequest);


                        }
                    });
            alertDialog.setNegativeButton("Work in progress", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                }
            });
            alertDialog.show();*/

        });
    }

    @Override
    public int getItemCount() {
        return forSearches.size();
    }
}
